/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PropertiesImport } from './routes/properties'
import { Route as LayoutImport } from './routes/layout'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthenticationImport } from './routes/_authentication'
import { Route as IndexImport } from './routes/index'
import { Route as TestPathlessOneImport } from './routes/test/_pathlessOne'
import { Route as TasksTaskListImport } from './routes/tasks/_taskList'
import { Route as LayoutCreateImport } from './routes/layout/create'
import { Route as FilesCreateImport } from './routes/files/create'
import { Route as FilesSplatImport } from './routes/files/$'
import { Route as TasksTaskListIndexImport } from './routes/tasks/_taskList/index'
import { Route as TestPathlessOnePathlessTwoImport } from './routes/test/_pathlessOne/_pathlessTwo'
import { Route as TasksTaskListListImport } from './routes/tasks/_taskList/list'
import { Route as TasksTaskListCreateImport } from './routes/tasks/_taskList/create'
import { Route as TasksTaskIdTaskDetailImport } from './routes/tasks/$taskId/_taskDetail'
import { Route as TestPathlessOnePathlessTwoIndexImport } from './routes/test/_pathlessOne/_pathlessTwo/index'
import { Route as TasksTaskIdTaskDetailIndexImport } from './routes/tasks/$taskId/_taskDetail/index'
import { Route as TasksTaskIdTaskDetailEditImport } from './routes/tasks/$taskId/_taskDetail/edit'
import { Route as DispatchesDispatchesUuidPublicImport } from './routes/dispatches.dispatches.$uuid.public'
import { Route as AuthenticationDispatchesDispatchesIdImport } from './routes/_authentication/dispatches/dispatches/$id'

// Create Virtual Routes

const TestImport = createFileRoute('/test')()
const TasksImport = createFileRoute('/tasks')()
const TasksTaskIdImport = createFileRoute('/tasks/$taskId')()

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const PropertiesRoute = PropertiesImport.update({
  id: '/properties',
  path: '/properties',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/layout',
  path: '/layout',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationRoute = AuthenticationImport.update({
  id: '/_authentication',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdRoute = TasksTaskIdImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => TasksRoute,
} as any)

const TestPathlessOneRoute = TestPathlessOneImport.update({
  id: '/_pathlessOne',
  getParentRoute: () => TestRoute,
} as any)

const TasksTaskListRoute = TasksTaskListImport.update({
  id: '/_taskList',
  getParentRoute: () => TasksRoute,
} as any)

const LayoutCreateRoute = LayoutCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LayoutRoute,
} as any)

const FilesCreateRoute = FilesCreateImport.update({
  id: '/files/create',
  path: '/files/create',
  getParentRoute: () => rootRoute,
} as any)

const FilesSplatRoute = FilesSplatImport.update({
  id: '/files/$',
  path: '/files/$',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskListIndexRoute = TasksTaskListIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksTaskListRoute,
} as any)

const TestPathlessOnePathlessTwoRoute = TestPathlessOnePathlessTwoImport.update(
  {
    id: '/_pathlessTwo',
    getParentRoute: () => TestPathlessOneRoute,
  } as any,
)

const TasksTaskListListRoute = TasksTaskListListImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => TasksTaskListRoute,
} as any)

const TasksTaskListCreateRoute = TasksTaskListCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => TasksTaskListRoute,
} as any)

const TasksTaskIdTaskDetailRoute = TasksTaskIdTaskDetailImport.update({
  id: '/_taskDetail',
  getParentRoute: () => TasksTaskIdRoute,
} as any)

const TestPathlessOnePathlessTwoIndexRoute =
  TestPathlessOnePathlessTwoIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => TestPathlessOnePathlessTwoRoute,
  } as any)

const TasksTaskIdTaskDetailIndexRoute = TasksTaskIdTaskDetailIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => TasksTaskIdTaskDetailRoute,
  } as any,
)

const TasksTaskIdTaskDetailEditRoute = TasksTaskIdTaskDetailEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TasksTaskIdTaskDetailRoute,
} as any)

const DispatchesDispatchesUuidPublicRoute =
  DispatchesDispatchesUuidPublicImport.update({
    id: '/dispatches/dispatches/$uuid/public',
    path: '/dispatches/dispatches/$uuid/public',
    getParentRoute: () => rootRoute,
  } as any)

const AuthenticationDispatchesDispatchesIdRoute =
  AuthenticationDispatchesDispatchesIdImport.update({
    id: '/dispatches/dispatches/$id',
    path: '/dispatches/dispatches/$id',
    getParentRoute: () => AuthenticationRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authentication': {
      id: '/_authentication'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticationImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/layout': {
      id: '/layout'
      path: '/layout'
      fullPath: '/layout'
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/properties': {
      id: '/properties'
      path: '/properties'
      fullPath: '/properties'
      preLoaderRoute: typeof PropertiesImport
      parentRoute: typeof rootRoute
    }
    '/files/$': {
      id: '/files/$'
      path: '/files/$'
      fullPath: '/files/$'
      preLoaderRoute: typeof FilesSplatImport
      parentRoute: typeof rootRoute
    }
    '/files/create': {
      id: '/files/create'
      path: '/files/create'
      fullPath: '/files/create'
      preLoaderRoute: typeof FilesCreateImport
      parentRoute: typeof rootRoute
    }
    '/layout/create': {
      id: '/layout/create'
      path: '/create'
      fullPath: '/layout/create'
      preLoaderRoute: typeof LayoutCreateImport
      parentRoute: typeof LayoutImport
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/tasks/_taskList': {
      id: '/tasks/_taskList'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksTaskListImport
      parentRoute: typeof TasksRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/test/_pathlessOne': {
      id: '/test/_pathlessOne'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestPathlessOneImport
      parentRoute: typeof TestRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdImport
      parentRoute: typeof TasksImport
    }
    '/tasks/$taskId/_taskDetail': {
      id: '/tasks/$taskId/_taskDetail'
      path: '/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdTaskDetailImport
      parentRoute: typeof TasksTaskIdRoute
    }
    '/tasks/_taskList/create': {
      id: '/tasks/_taskList/create'
      path: '/create'
      fullPath: '/tasks/create'
      preLoaderRoute: typeof TasksTaskListCreateImport
      parentRoute: typeof TasksTaskListImport
    }
    '/tasks/_taskList/list': {
      id: '/tasks/_taskList/list'
      path: '/list'
      fullPath: '/tasks/list'
      preLoaderRoute: typeof TasksTaskListListImport
      parentRoute: typeof TasksTaskListImport
    }
    '/test/_pathlessOne/_pathlessTwo': {
      id: '/test/_pathlessOne/_pathlessTwo'
      path: ''
      fullPath: '/test'
      preLoaderRoute: typeof TestPathlessOnePathlessTwoImport
      parentRoute: typeof TestPathlessOneImport
    }
    '/tasks/_taskList/': {
      id: '/tasks/_taskList/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksTaskListIndexImport
      parentRoute: typeof TasksTaskListImport
    }
    '/_authentication/dispatches/dispatches/$id': {
      id: '/_authentication/dispatches/dispatches/$id'
      path: '/dispatches/dispatches/$id'
      fullPath: '/dispatches/dispatches/$id'
      preLoaderRoute: typeof AuthenticationDispatchesDispatchesIdImport
      parentRoute: typeof AuthenticationImport
    }
    '/dispatches/dispatches/$uuid/public': {
      id: '/dispatches/dispatches/$uuid/public'
      path: '/dispatches/dispatches/$uuid/public'
      fullPath: '/dispatches/dispatches/$uuid/public'
      preLoaderRoute: typeof DispatchesDispatchesUuidPublicImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$taskId/_taskDetail/edit': {
      id: '/tasks/$taskId/_taskDetail/edit'
      path: '/edit'
      fullPath: '/tasks/$taskId/edit'
      preLoaderRoute: typeof TasksTaskIdTaskDetailEditImport
      parentRoute: typeof TasksTaskIdTaskDetailImport
    }
    '/tasks/$taskId/_taskDetail/': {
      id: '/tasks/$taskId/_taskDetail/'
      path: '/'
      fullPath: '/tasks/$taskId/'
      preLoaderRoute: typeof TasksTaskIdTaskDetailIndexImport
      parentRoute: typeof TasksTaskIdTaskDetailImport
    }
    '/test/_pathlessOne/_pathlessTwo/': {
      id: '/test/_pathlessOne/_pathlessTwo/'
      path: '/'
      fullPath: '/test/'
      preLoaderRoute: typeof TestPathlessOnePathlessTwoIndexImport
      parentRoute: typeof TestPathlessOnePathlessTwoImport
    }
  }
}

// Create and export the route tree

interface AuthenticationRouteChildren {
  AuthenticationDispatchesDispatchesIdRoute: typeof AuthenticationDispatchesDispatchesIdRoute
}

const AuthenticationRouteChildren: AuthenticationRouteChildren = {
  AuthenticationDispatchesDispatchesIdRoute:
    AuthenticationDispatchesDispatchesIdRoute,
}

const AuthenticationRouteWithChildren = AuthenticationRoute._addFileChildren(
  AuthenticationRouteChildren,
)

interface LayoutRouteChildren {
  LayoutCreateRoute: typeof LayoutCreateRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutCreateRoute: LayoutCreateRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface TasksTaskListRouteChildren {
  TasksTaskListCreateRoute: typeof TasksTaskListCreateRoute
  TasksTaskListListRoute: typeof TasksTaskListListRoute
  TasksTaskListIndexRoute: typeof TasksTaskListIndexRoute
}

const TasksTaskListRouteChildren: TasksTaskListRouteChildren = {
  TasksTaskListCreateRoute: TasksTaskListCreateRoute,
  TasksTaskListListRoute: TasksTaskListListRoute,
  TasksTaskListIndexRoute: TasksTaskListIndexRoute,
}

const TasksTaskListRouteWithChildren = TasksTaskListRoute._addFileChildren(
  TasksTaskListRouteChildren,
)

interface TasksTaskIdTaskDetailRouteChildren {
  TasksTaskIdTaskDetailEditRoute: typeof TasksTaskIdTaskDetailEditRoute
  TasksTaskIdTaskDetailIndexRoute: typeof TasksTaskIdTaskDetailIndexRoute
}

const TasksTaskIdTaskDetailRouteChildren: TasksTaskIdTaskDetailRouteChildren = {
  TasksTaskIdTaskDetailEditRoute: TasksTaskIdTaskDetailEditRoute,
  TasksTaskIdTaskDetailIndexRoute: TasksTaskIdTaskDetailIndexRoute,
}

const TasksTaskIdTaskDetailRouteWithChildren =
  TasksTaskIdTaskDetailRoute._addFileChildren(
    TasksTaskIdTaskDetailRouteChildren,
  )

interface TasksTaskIdRouteChildren {
  TasksTaskIdTaskDetailRoute: typeof TasksTaskIdTaskDetailRouteWithChildren
}

const TasksTaskIdRouteChildren: TasksTaskIdRouteChildren = {
  TasksTaskIdTaskDetailRoute: TasksTaskIdTaskDetailRouteWithChildren,
}

const TasksTaskIdRouteWithChildren = TasksTaskIdRoute._addFileChildren(
  TasksTaskIdRouteChildren,
)

interface TasksRouteChildren {
  TasksTaskListRoute: typeof TasksTaskListRouteWithChildren
  TasksTaskIdRoute: typeof TasksTaskIdRouteWithChildren
}

const TasksRouteChildren: TasksRouteChildren = {
  TasksTaskListRoute: TasksTaskListRouteWithChildren,
  TasksTaskIdRoute: TasksTaskIdRouteWithChildren,
}

const TasksRouteWithChildren = TasksRoute._addFileChildren(TasksRouteChildren)

interface TestPathlessOnePathlessTwoRouteChildren {
  TestPathlessOnePathlessTwoIndexRoute: typeof TestPathlessOnePathlessTwoIndexRoute
}

const TestPathlessOnePathlessTwoRouteChildren: TestPathlessOnePathlessTwoRouteChildren =
  {
    TestPathlessOnePathlessTwoIndexRoute: TestPathlessOnePathlessTwoIndexRoute,
  }

const TestPathlessOnePathlessTwoRouteWithChildren =
  TestPathlessOnePathlessTwoRoute._addFileChildren(
    TestPathlessOnePathlessTwoRouteChildren,
  )

interface TestPathlessOneRouteChildren {
  TestPathlessOnePathlessTwoRoute: typeof TestPathlessOnePathlessTwoRouteWithChildren
}

const TestPathlessOneRouteChildren: TestPathlessOneRouteChildren = {
  TestPathlessOnePathlessTwoRoute: TestPathlessOnePathlessTwoRouteWithChildren,
}

const TestPathlessOneRouteWithChildren = TestPathlessOneRoute._addFileChildren(
  TestPathlessOneRouteChildren,
)

interface TestRouteChildren {
  TestPathlessOneRoute: typeof TestPathlessOneRouteWithChildren
}

const TestRouteChildren: TestRouteChildren = {
  TestPathlessOneRoute: TestPathlessOneRouteWithChildren,
}

const TestRouteWithChildren = TestRoute._addFileChildren(TestRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticationRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/layout': typeof LayoutRouteWithChildren
  '/properties': typeof PropertiesRoute
  '/files/$': typeof FilesSplatRoute
  '/files/create': typeof FilesCreateRoute
  '/layout/create': typeof LayoutCreateRoute
  '/tasks': typeof TasksTaskListRouteWithChildren
  '/test': typeof TestPathlessOnePathlessTwoRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdTaskDetailRouteWithChildren
  '/tasks/create': typeof TasksTaskListCreateRoute
  '/tasks/list': typeof TasksTaskListListRoute
  '/tasks/': typeof TasksTaskListIndexRoute
  '/dispatches/dispatches/$id': typeof AuthenticationDispatchesDispatchesIdRoute
  '/dispatches/dispatches/$uuid/public': typeof DispatchesDispatchesUuidPublicRoute
  '/tasks/$taskId/edit': typeof TasksTaskIdTaskDetailEditRoute
  '/tasks/$taskId/': typeof TasksTaskIdTaskDetailIndexRoute
  '/test/': typeof TestPathlessOnePathlessTwoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticationRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/layout': typeof LayoutRouteWithChildren
  '/properties': typeof PropertiesRoute
  '/files/$': typeof FilesSplatRoute
  '/files/create': typeof FilesCreateRoute
  '/layout/create': typeof LayoutCreateRoute
  '/tasks': typeof TasksTaskListIndexRoute
  '/test': typeof TestPathlessOnePathlessTwoIndexRoute
  '/tasks/$taskId': typeof TasksTaskIdTaskDetailIndexRoute
  '/tasks/create': typeof TasksTaskListCreateRoute
  '/tasks/list': typeof TasksTaskListListRoute
  '/dispatches/dispatches/$id': typeof AuthenticationDispatchesDispatchesIdRoute
  '/dispatches/dispatches/$uuid/public': typeof DispatchesDispatchesUuidPublicRoute
  '/tasks/$taskId/edit': typeof TasksTaskIdTaskDetailEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authentication': typeof AuthenticationRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/layout': typeof LayoutRouteWithChildren
  '/properties': typeof PropertiesRoute
  '/files/$': typeof FilesSplatRoute
  '/files/create': typeof FilesCreateRoute
  '/layout/create': typeof LayoutCreateRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/_taskList': typeof TasksTaskListRouteWithChildren
  '/test': typeof TestRouteWithChildren
  '/test/_pathlessOne': typeof TestPathlessOneRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRouteWithChildren
  '/tasks/$taskId/_taskDetail': typeof TasksTaskIdTaskDetailRouteWithChildren
  '/tasks/_taskList/create': typeof TasksTaskListCreateRoute
  '/tasks/_taskList/list': typeof TasksTaskListListRoute
  '/test/_pathlessOne/_pathlessTwo': typeof TestPathlessOnePathlessTwoRouteWithChildren
  '/tasks/_taskList/': typeof TasksTaskListIndexRoute
  '/_authentication/dispatches/dispatches/$id': typeof AuthenticationDispatchesDispatchesIdRoute
  '/dispatches/dispatches/$uuid/public': typeof DispatchesDispatchesUuidPublicRoute
  '/tasks/$taskId/_taskDetail/edit': typeof TasksTaskIdTaskDetailEditRoute
  '/tasks/$taskId/_taskDetail/': typeof TasksTaskIdTaskDetailIndexRoute
  '/test/_pathlessOne/_pathlessTwo/': typeof TestPathlessOnePathlessTwoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard'
    | '/layout'
    | '/properties'
    | '/files/$'
    | '/files/create'
    | '/layout/create'
    | '/tasks'
    | '/test'
    | '/tasks/$taskId'
    | '/tasks/create'
    | '/tasks/list'
    | '/tasks/'
    | '/dispatches/dispatches/$id'
    | '/dispatches/dispatches/$uuid/public'
    | '/tasks/$taskId/edit'
    | '/tasks/$taskId/'
    | '/test/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dashboard'
    | '/layout'
    | '/properties'
    | '/files/$'
    | '/files/create'
    | '/layout/create'
    | '/tasks'
    | '/test'
    | '/tasks/$taskId'
    | '/tasks/create'
    | '/tasks/list'
    | '/dispatches/dispatches/$id'
    | '/dispatches/dispatches/$uuid/public'
    | '/tasks/$taskId/edit'
  id:
    | '__root__'
    | '/'
    | '/_authentication'
    | '/dashboard'
    | '/layout'
    | '/properties'
    | '/files/$'
    | '/files/create'
    | '/layout/create'
    | '/tasks'
    | '/tasks/_taskList'
    | '/test'
    | '/test/_pathlessOne'
    | '/tasks/$taskId'
    | '/tasks/$taskId/_taskDetail'
    | '/tasks/_taskList/create'
    | '/tasks/_taskList/list'
    | '/test/_pathlessOne/_pathlessTwo'
    | '/tasks/_taskList/'
    | '/_authentication/dispatches/dispatches/$id'
    | '/dispatches/dispatches/$uuid/public'
    | '/tasks/$taskId/_taskDetail/edit'
    | '/tasks/$taskId/_taskDetail/'
    | '/test/_pathlessOne/_pathlessTwo/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticationRoute: typeof AuthenticationRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  PropertiesRoute: typeof PropertiesRoute
  FilesSplatRoute: typeof FilesSplatRoute
  FilesCreateRoute: typeof FilesCreateRoute
  TasksRoute: typeof TasksRouteWithChildren
  TestRoute: typeof TestRouteWithChildren
  DispatchesDispatchesUuidPublicRoute: typeof DispatchesDispatchesUuidPublicRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticationRoute: AuthenticationRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LayoutRoute: LayoutRouteWithChildren,
  PropertiesRoute: PropertiesRoute,
  FilesSplatRoute: FilesSplatRoute,
  FilesCreateRoute: FilesCreateRoute,
  TasksRoute: TasksRouteWithChildren,
  TestRoute: TestRouteWithChildren,
  DispatchesDispatchesUuidPublicRoute: DispatchesDispatchesUuidPublicRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authentication",
        "/dashboard",
        "/layout",
        "/properties",
        "/files/$",
        "/files/create",
        "/tasks",
        "/test",
        "/dispatches/dispatches/$uuid/public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authentication": {
      "filePath": "_authentication.tsx",
      "children": [
        "/_authentication/dispatches/dispatches/$id"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/layout": {
      "filePath": "layout.tsx",
      "children": [
        "/layout/create"
      ]
    },
    "/properties": {
      "filePath": "properties.tsx"
    },
    "/files/$": {
      "filePath": "files/$.tsx"
    },
    "/files/create": {
      "filePath": "files/create.tsx"
    },
    "/layout/create": {
      "filePath": "layout/create.tsx",
      "parent": "/layout"
    },
    "/tasks": {
      "filePath": "tasks",
      "children": [
        "/tasks/_taskList",
        "/tasks/$taskId"
      ]
    },
    "/tasks/_taskList": {
      "filePath": "tasks/_taskList.tsx",
      "parent": "/tasks",
      "children": [
        "/tasks/_taskList/create",
        "/tasks/_taskList/list",
        "/tasks/_taskList/"
      ]
    },
    "/test": {
      "filePath": "test",
      "children": [
        "/test/_pathlessOne"
      ]
    },
    "/test/_pathlessOne": {
      "filePath": "test/_pathlessOne.tsx",
      "parent": "/test",
      "children": [
        "/test/_pathlessOne/_pathlessTwo"
      ]
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId",
      "parent": "/tasks",
      "children": [
        "/tasks/$taskId/_taskDetail"
      ]
    },
    "/tasks/$taskId/_taskDetail": {
      "filePath": "tasks/$taskId/_taskDetail.tsx",
      "parent": "/tasks/$taskId",
      "children": [
        "/tasks/$taskId/_taskDetail/edit",
        "/tasks/$taskId/_taskDetail/"
      ]
    },
    "/tasks/_taskList/create": {
      "filePath": "tasks/_taskList/create.tsx",
      "parent": "/tasks/_taskList"
    },
    "/tasks/_taskList/list": {
      "filePath": "tasks/_taskList/list.tsx",
      "parent": "/tasks/_taskList"
    },
    "/test/_pathlessOne/_pathlessTwo": {
      "filePath": "test/_pathlessOne/_pathlessTwo.tsx",
      "parent": "/test/_pathlessOne",
      "children": [
        "/test/_pathlessOne/_pathlessTwo/"
      ]
    },
    "/tasks/_taskList/": {
      "filePath": "tasks/_taskList/index.tsx",
      "parent": "/tasks/_taskList"
    },
    "/_authentication/dispatches/dispatches/$id": {
      "filePath": "_authentication/dispatches/dispatches/$id.tsx",
      "parent": "/_authentication"
    },
    "/dispatches/dispatches/$uuid/public": {
      "filePath": "dispatches.dispatches.$uuid.public.tsx"
    },
    "/tasks/$taskId/_taskDetail/edit": {
      "filePath": "tasks/$taskId/_taskDetail/edit.tsx",
      "parent": "/tasks/$taskId/_taskDetail"
    },
    "/tasks/$taskId/_taskDetail/": {
      "filePath": "tasks/$taskId/_taskDetail/index.tsx",
      "parent": "/tasks/$taskId/_taskDetail"
    },
    "/test/_pathlessOne/_pathlessTwo/": {
      "filePath": "test/_pathlessOne/_pathlessTwo/index.tsx",
      "parent": "/test/_pathlessOne/_pathlessTwo"
    }
  }
}
ROUTE_MANIFEST_END */
