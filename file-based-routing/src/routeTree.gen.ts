/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TasksImport } from './routes/tasks'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as TasksTaskIdImport } from './routes/tasks_.$taskId'
import { Route as TasksCreateImport } from './routes/tasks.create'
import { Route as TasksTaskIdEditImport } from './routes/tasks_.$taskId.edit'

// Create/Update Routes

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdRoute = TasksTaskIdImport.update({
  id: '/tasks_/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRoute,
} as any)

const TasksCreateRoute = TasksCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => TasksRoute,
} as any)

const TasksTaskIdEditRoute = TasksTaskIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TasksTaskIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/tasks/create': {
      id: '/tasks/create'
      path: '/create'
      fullPath: '/tasks/create'
      preLoaderRoute: typeof TasksCreateImport
      parentRoute: typeof TasksImport
    }
    '/tasks_/$taskId': {
      id: '/tasks_/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdImport
      parentRoute: typeof rootRoute
    }
    '/tasks_/$taskId/edit': {
      id: '/tasks_/$taskId/edit'
      path: '/edit'
      fullPath: '/tasks/$taskId/edit'
      preLoaderRoute: typeof TasksTaskIdEditImport
      parentRoute: typeof TasksTaskIdImport
    }
  }
}

// Create and export the route tree

interface TasksRouteChildren {
  TasksCreateRoute: typeof TasksCreateRoute
}

const TasksRouteChildren: TasksRouteChildren = {
  TasksCreateRoute: TasksCreateRoute,
}

const TasksRouteWithChildren = TasksRoute._addFileChildren(TasksRouteChildren)

interface TasksTaskIdRouteChildren {
  TasksTaskIdEditRoute: typeof TasksTaskIdEditRoute
}

const TasksTaskIdRouteChildren: TasksTaskIdRouteChildren = {
  TasksTaskIdEditRoute: TasksTaskIdEditRoute,
}

const TasksTaskIdRouteWithChildren = TasksTaskIdRoute._addFileChildren(
  TasksTaskIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/create': typeof TasksCreateRoute
  '/tasks/$taskId': typeof TasksTaskIdRouteWithChildren
  '/tasks/$taskId/edit': typeof TasksTaskIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/create': typeof TasksCreateRoute
  '/tasks/$taskId': typeof TasksTaskIdRouteWithChildren
  '/tasks/$taskId/edit': typeof TasksTaskIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/create': typeof TasksCreateRoute
  '/tasks_/$taskId': typeof TasksTaskIdRouteWithChildren
  '/tasks_/$taskId/edit': typeof TasksTaskIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/tasks'
    | '/tasks/create'
    | '/tasks/$taskId'
    | '/tasks/$taskId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/tasks'
    | '/tasks/create'
    | '/tasks/$taskId'
    | '/tasks/$taskId/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/tasks'
    | '/tasks/create'
    | '/tasks_/$taskId'
    | '/tasks_/$taskId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  TasksRoute: typeof TasksRouteWithChildren
  TasksTaskIdRoute: typeof TasksTaskIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  TasksRoute: TasksRouteWithChildren,
  TasksTaskIdRoute: TasksTaskIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/tasks",
        "/tasks_/$taskId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/tasks": {
      "filePath": "tasks.tsx",
      "children": [
        "/tasks/create"
      ]
    },
    "/tasks/create": {
      "filePath": "tasks.create.tsx",
      "parent": "/tasks"
    },
    "/tasks_/$taskId": {
      "filePath": "tasks_.$taskId.tsx",
      "children": [
        "/tasks_/$taskId/edit"
      ]
    },
    "/tasks_/$taskId/edit": {
      "filePath": "tasks_.$taskId.edit.tsx",
      "parent": "/tasks_/$taskId"
    }
  }
}
ROUTE_MANIFEST_END */
