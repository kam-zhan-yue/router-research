/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PropertiesImport } from './routes/properties'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as TasksTaskListImport } from './routes/tasks/_taskList'
import { Route as FilesCreateImport } from './routes/files/create'
import { Route as FilesSplatImport } from './routes/files/$'
import { Route as TasksTaskListIndexImport } from './routes/tasks/_taskList/index'
import { Route as TasksTaskListCreateImport } from './routes/tasks/_taskList/create'
import { Route as TasksTaskIdTaskDetailImport } from './routes/tasks/$taskId/_taskDetail'
import { Route as TasksTaskIdTaskDetailIndexImport } from './routes/tasks/$taskId/_taskDetail/index'
import { Route as TasksTaskIdTaskDetailEditImport } from './routes/tasks/$taskId/_taskDetail/edit'

// Create Virtual Routes

const TasksImport = createFileRoute('/tasks')()
const TasksTaskIdImport = createFileRoute('/tasks/$taskId')()

// Create/Update Routes

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const PropertiesRoute = PropertiesImport.update({
  id: '/properties',
  path: '/properties',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdRoute = TasksTaskIdImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => TasksRoute,
} as any)

const TasksTaskListRoute = TasksTaskListImport.update({
  id: '/_taskList',
  getParentRoute: () => TasksRoute,
} as any)

const FilesCreateRoute = FilesCreateImport.update({
  id: '/files/create',
  path: '/files/create',
  getParentRoute: () => rootRoute,
} as any)

const FilesSplatRoute = FilesSplatImport.update({
  id: '/files/$',
  path: '/files/$',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskListIndexRoute = TasksTaskListIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksTaskListRoute,
} as any)

const TasksTaskListCreateRoute = TasksTaskListCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => TasksTaskListRoute,
} as any)

const TasksTaskIdTaskDetailRoute = TasksTaskIdTaskDetailImport.update({
  id: '/_taskDetail',
  getParentRoute: () => TasksTaskIdRoute,
} as any)

const TasksTaskIdTaskDetailIndexRoute = TasksTaskIdTaskDetailIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => TasksTaskIdTaskDetailRoute,
  } as any,
)

const TasksTaskIdTaskDetailEditRoute = TasksTaskIdTaskDetailEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TasksTaskIdTaskDetailRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/properties': {
      id: '/properties'
      path: '/properties'
      fullPath: '/properties'
      preLoaderRoute: typeof PropertiesImport
      parentRoute: typeof rootRoute
    }
    '/files/$': {
      id: '/files/$'
      path: '/files/$'
      fullPath: '/files/$'
      preLoaderRoute: typeof FilesSplatImport
      parentRoute: typeof rootRoute
    }
    '/files/create': {
      id: '/files/create'
      path: '/files/create'
      fullPath: '/files/create'
      preLoaderRoute: typeof FilesCreateImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/tasks/_taskList': {
      id: '/tasks/_taskList'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksTaskListImport
      parentRoute: typeof TasksRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdImport
      parentRoute: typeof TasksImport
    }
    '/tasks/$taskId/_taskDetail': {
      id: '/tasks/$taskId/_taskDetail'
      path: '/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdTaskDetailImport
      parentRoute: typeof TasksTaskIdRoute
    }
    '/tasks/_taskList/create': {
      id: '/tasks/_taskList/create'
      path: '/create'
      fullPath: '/tasks/create'
      preLoaderRoute: typeof TasksTaskListCreateImport
      parentRoute: typeof TasksTaskListImport
    }
    '/tasks/_taskList/': {
      id: '/tasks/_taskList/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksTaskListIndexImport
      parentRoute: typeof TasksTaskListImport
    }
    '/tasks/$taskId/_taskDetail/edit': {
      id: '/tasks/$taskId/_taskDetail/edit'
      path: '/edit'
      fullPath: '/tasks/$taskId/edit'
      preLoaderRoute: typeof TasksTaskIdTaskDetailEditImport
      parentRoute: typeof TasksTaskIdTaskDetailImport
    }
    '/tasks/$taskId/_taskDetail/': {
      id: '/tasks/$taskId/_taskDetail/'
      path: '/'
      fullPath: '/tasks/$taskId/'
      preLoaderRoute: typeof TasksTaskIdTaskDetailIndexImport
      parentRoute: typeof TasksTaskIdTaskDetailImport
    }
  }
}

// Create and export the route tree

interface TasksTaskListRouteChildren {
  TasksTaskListCreateRoute: typeof TasksTaskListCreateRoute
  TasksTaskListIndexRoute: typeof TasksTaskListIndexRoute
}

const TasksTaskListRouteChildren: TasksTaskListRouteChildren = {
  TasksTaskListCreateRoute: TasksTaskListCreateRoute,
  TasksTaskListIndexRoute: TasksTaskListIndexRoute,
}

const TasksTaskListRouteWithChildren = TasksTaskListRoute._addFileChildren(
  TasksTaskListRouteChildren,
)

interface TasksTaskIdTaskDetailRouteChildren {
  TasksTaskIdTaskDetailEditRoute: typeof TasksTaskIdTaskDetailEditRoute
  TasksTaskIdTaskDetailIndexRoute: typeof TasksTaskIdTaskDetailIndexRoute
}

const TasksTaskIdTaskDetailRouteChildren: TasksTaskIdTaskDetailRouteChildren = {
  TasksTaskIdTaskDetailEditRoute: TasksTaskIdTaskDetailEditRoute,
  TasksTaskIdTaskDetailIndexRoute: TasksTaskIdTaskDetailIndexRoute,
}

const TasksTaskIdTaskDetailRouteWithChildren =
  TasksTaskIdTaskDetailRoute._addFileChildren(
    TasksTaskIdTaskDetailRouteChildren,
  )

interface TasksTaskIdRouteChildren {
  TasksTaskIdTaskDetailRoute: typeof TasksTaskIdTaskDetailRouteWithChildren
}

const TasksTaskIdRouteChildren: TasksTaskIdRouteChildren = {
  TasksTaskIdTaskDetailRoute: TasksTaskIdTaskDetailRouteWithChildren,
}

const TasksTaskIdRouteWithChildren = TasksTaskIdRoute._addFileChildren(
  TasksTaskIdRouteChildren,
)

interface TasksRouteChildren {
  TasksTaskListRoute: typeof TasksTaskListRouteWithChildren
  TasksTaskIdRoute: typeof TasksTaskIdRouteWithChildren
}

const TasksRouteChildren: TasksRouteChildren = {
  TasksTaskListRoute: TasksTaskListRouteWithChildren,
  TasksTaskIdRoute: TasksTaskIdRouteWithChildren,
}

const TasksRouteWithChildren = TasksRoute._addFileChildren(TasksRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/properties': typeof PropertiesRoute
  '/files/$': typeof FilesSplatRoute
  '/files/create': typeof FilesCreateRoute
  '/tasks': typeof TasksTaskListRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdTaskDetailRouteWithChildren
  '/tasks/create': typeof TasksTaskListCreateRoute
  '/tasks/': typeof TasksTaskListIndexRoute
  '/tasks/$taskId/edit': typeof TasksTaskIdTaskDetailEditRoute
  '/tasks/$taskId/': typeof TasksTaskIdTaskDetailIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/properties': typeof PropertiesRoute
  '/files/$': typeof FilesSplatRoute
  '/files/create': typeof FilesCreateRoute
  '/tasks': typeof TasksTaskListIndexRoute
  '/tasks/$taskId': typeof TasksTaskIdTaskDetailIndexRoute
  '/tasks/create': typeof TasksTaskListCreateRoute
  '/tasks/$taskId/edit': typeof TasksTaskIdTaskDetailEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/properties': typeof PropertiesRoute
  '/files/$': typeof FilesSplatRoute
  '/files/create': typeof FilesCreateRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/_taskList': typeof TasksTaskListRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRouteWithChildren
  '/tasks/$taskId/_taskDetail': typeof TasksTaskIdTaskDetailRouteWithChildren
  '/tasks/_taskList/create': typeof TasksTaskListCreateRoute
  '/tasks/_taskList/': typeof TasksTaskListIndexRoute
  '/tasks/$taskId/_taskDetail/edit': typeof TasksTaskIdTaskDetailEditRoute
  '/tasks/$taskId/_taskDetail/': typeof TasksTaskIdTaskDetailIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/properties'
    | '/files/$'
    | '/files/create'
    | '/tasks'
    | '/tasks/$taskId'
    | '/tasks/create'
    | '/tasks/'
    | '/tasks/$taskId/edit'
    | '/tasks/$taskId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/properties'
    | '/files/$'
    | '/files/create'
    | '/tasks'
    | '/tasks/$taskId'
    | '/tasks/create'
    | '/tasks/$taskId/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/properties'
    | '/files/$'
    | '/files/create'
    | '/tasks'
    | '/tasks/_taskList'
    | '/tasks/$taskId'
    | '/tasks/$taskId/_taskDetail'
    | '/tasks/_taskList/create'
    | '/tasks/_taskList/'
    | '/tasks/$taskId/_taskDetail/edit'
    | '/tasks/$taskId/_taskDetail/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  PropertiesRoute: typeof PropertiesRoute
  FilesSplatRoute: typeof FilesSplatRoute
  FilesCreateRoute: typeof FilesCreateRoute
  TasksRoute: typeof TasksRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  PropertiesRoute: PropertiesRoute,
  FilesSplatRoute: FilesSplatRoute,
  FilesCreateRoute: FilesCreateRoute,
  TasksRoute: TasksRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/properties",
        "/files/$",
        "/files/create",
        "/tasks"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/properties": {
      "filePath": "properties.tsx"
    },
    "/files/$": {
      "filePath": "files/$.tsx"
    },
    "/files/create": {
      "filePath": "files/create.tsx"
    },
    "/tasks": {
      "filePath": "tasks",
      "children": [
        "/tasks/_taskList",
        "/tasks/$taskId"
      ]
    },
    "/tasks/_taskList": {
      "filePath": "tasks/_taskList.tsx",
      "parent": "/tasks",
      "children": [
        "/tasks/_taskList/create",
        "/tasks/_taskList/"
      ]
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId",
      "parent": "/tasks",
      "children": [
        "/tasks/$taskId/_taskDetail"
      ]
    },
    "/tasks/$taskId/_taskDetail": {
      "filePath": "tasks/$taskId/_taskDetail.tsx",
      "parent": "/tasks/$taskId",
      "children": [
        "/tasks/$taskId/_taskDetail/edit",
        "/tasks/$taskId/_taskDetail/"
      ]
    },
    "/tasks/_taskList/create": {
      "filePath": "tasks/_taskList/create.tsx",
      "parent": "/tasks/_taskList"
    },
    "/tasks/_taskList/": {
      "filePath": "tasks/_taskList/index.tsx",
      "parent": "/tasks/_taskList"
    },
    "/tasks/$taskId/_taskDetail/edit": {
      "filePath": "tasks/$taskId/_taskDetail/edit.tsx",
      "parent": "/tasks/$taskId/_taskDetail"
    },
    "/tasks/$taskId/_taskDetail/": {
      "filePath": "tasks/$taskId/_taskDetail/index.tsx",
      "parent": "/tasks/$taskId/_taskDetail"
    }
  }
}
ROUTE_MANIFEST_END */
